# -*- coding: utf-8 -*-
"""Reinfall Predictionipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1uhUYO8MdCW4zbpLxnM_wlfSUKLiiOz2p
"""

import pandas as pd
import matplotlib.pyplot as plt
from sklearn.compose import ColumnTransformer
from sklearn.pipeline import Pipeline
from sklearn.preprocessing import StandardScaler, OneHotEncoder
from sklearn.model_selection import train_test_split, GridSearchCV, StratifiedKFold
from sklearn.ensemble import RandomForestClassifier
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import classification_report, confusion_matrix, ConfusionMatrixDisplay
import seaborn as sns
from sklearn.metrics import accuracy_score

url = "https://cf-courses-data.s3.us.cloud-object-storage.appdomain.cloud/_0eYOqji3unP1tDNKWZMjg/weatherAUS-2.csv"
df = pd.read_csv(url)

df.head()

df.count

df = df.dropna()
df.info()

df.columns

df = df.rename(columns={'RainToday': 'RainYesterday',
                        'RainTomorrow': 'RainToday'
                        })

#Location selection
df = df[df.Location.isin(['Melbourne', 'MelbourneAirport', 'Watsonia'])]
df.info()

#Function to map dates to seasons
def date_to_season(date):
  month = date.month
  if (month == 12) or (month == 1) or (month == 2):
    return 'Winter'
  elif (month == 3) or (month == 4) or (month == 5):
    return 'Spring'
  elif (month == 6) or (month == 7) or (month == 8):
    return 'Summer'
  elif (month == 9) or (month == 10) or (month == 11):
    return 'Autumn'

print(df.columns)

df['Date'] = pd.to_datetime(df['Date'])
df['Season'] = df['Date'].apply(date_to_season)

df = df.drop(columns=['Date', 'Location'])
df

X = df.drop(columns=['RainToday'], axis = 1)
y = df['RainToday']

y.value_counts

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, stratify=y, random_state=42)

#Define preprocessing transformers for numerical and categorical features
numeric_features = X_train.select_dtypes(include=['int64', 'float64']).columns
categorical_features = X_train.select_dtypes(include=['object']).columns

#Scale the numeric features
numeric_transformer = Pipeline(steps=[
    ('scaler', StandardScaler())
])

#One-hot-encoding
categorical_transformer = Pipeline(steps=[
    ('onehot', OneHotEncoder(handle_unknown='ignore'))
])

preprocessor = ColumnTransformer(
    transformers=[
        ('num', numeric_transformer, numeric_features),
        ('cat', categorical_transformer, categorical_features)
    ]
)

#Define a parameter grid to use in a cross validation grid search model optimizer
param_grid = {
    'classifier__n_estimators': [50, 100],
    'classifier__max_depth': [None, 10, 20],
    'classifier__min_samples_split': [2, 5]
}

pipe = Pipeline(steps=[
    ('preprocessor', preprocessor),
    ('classifier', RandomForestClassifier())
])

cv = StratifiedKFold(n_splits=5, shuffle=True, random_state=42)

grid_search = GridSearchCV(estimator=pipe, param_grid=param_grid, cv=cv,
                           scoring='accuracy', verbose=2)
grid_search.fit(X_train, y_train)
print(grid_search.best_estimator_)

print("\nBest parameters found: ", grid_search.best_params_)
print("Best cross-validation score: {:.2f}".format(grid_search.best_score_))

test_score = grid_search.score(X_test, y_test)
print("Test set score: {:.2f}".format(test_score))

y_pred = grid_search.predict(X_test)

print('\nClassification Report:')
print(classification_report(y_test, y_pred))

#Plot the confusion matrix
conf_matrix = confusion_matrix(y_test, y_pred)
disp = ConfusionMatrixDisplay(confusion_matrix=conf_matrix, display_labels=grid_search.classes_)
disp.plot()
plt.show()

#Feature importances
feature_imporances = grid_search.best_estimator_.named_steps['classifier'].feature_importances_

feature_names = list(numeric_features) + list(grid_search.best_estimator_['preprocessor']
                                        .named_transformers_['cat']
                                        .named_steps['onehot']
                                        .get_feature_names_out(categorical_features))
feature_importances = grid_search.best_estimator_.named_steps['classifier'].feature_importances_

N = 20

importance_df = pd.DataFrame({'Feature': feature_names,
                              'Importance': feature_importances
                              }).sort_values('Importance', ascending=False)
top_features = importance_df.head(N)


plt.figure(figsize=(10, 6))
plt.barh(top_features['Feature'], top_features['Importance'], color='skyblue')
plt.gca().invert_yaxis()  # Invert y-axis to show the most important feature on top
plt.title(f'Top {N} Most Important Features in predicting whether it will rain today')
plt.xlabel('Importance Score')
plt.show()

#Trying another model
pipe.set_params(classifier=LogisticRegression(random_state=42))
grid_search.estimator = pipe #update the model's estimator to use the new pipeline

param_grid = {
    'classifier__solver' : ['liblinear'],
    'classifier__penalty': ['l1', 'l2'],
    'classifier__class_weight' : [None, 'balanced']
}

grid_search.param_grid = param_grid
grid_search.fit(X_train, y_train)

y_pred = grid_search.predict(X_test)
print(y_pred)

print(classification_report(y_test, y_pred))

conf_matrix = confusion_matrix(y_test, y_pred)

plt.figure()
sns.heatmap(conf_matrix, annot=True, cmap='Blues', fmt='d')

plt.title('Classification Confusion Matrix')
plt.xlabel('Predicted')
plt.ylabel('Actual')

plt.tight_layout()
plt.show()

rf_accuracy = accuracy_score(y_test, y_pred)
rf_correct_predictions = (y_test == y_pred).sum()

print("Random Forest Classifier:")
print(f"Accuracy: {rf_accuracy * 100:.2f}%")
print(f"Correct Predictions: {rf_correct_predictions}")

lr_accuracy = accuracy_score(y_test, y_pred)
lr_correct_predictions = (y_test == y_pred).sum()

print("\nLogistic Regression Classifier:")
print(f"Accuracy: {lr_accuracy * 100:.2f}%")
print(f"Correct Predictions: {lr_correct_predictions}")

lr_conf_matrix = confusion_matrix(y_test, y_pred)

TN, FP, FN, TP = lr_conf_matrix.ravel()


tpr = TP / (TP + FN) if (TP + FN) > 0 else 0


print("\nLogistic Regression Classifier:")
print(f"True Positive Rate (Recall): {tpr:.2f}")

print("\nClassification Report for Logistic Regression:")
print(classification_report(y_test, y_pred))

